"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/customers/edit/[id]/page",{

/***/ "(app-pages-browser)/./lib/services/customer.service.ts":
/*!******************************************!*\
  !*** ./lib/services/customer.service.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customerService: () => (/* binding */ customerService)\n/* harmony export */ });\n/* harmony import */ var _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabase/client */ \"(app-pages-browser)/./lib/supabase/client.ts\");\n\nclass CustomerService {\n    async getCustomers() {\n        try {\n            // First get all customers\n            const { data: customers, error: customersError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customers\").select(\"*\").order(\"created_at\", {\n                ascending: false\n            });\n            if (customersError) {\n                console.error(\"Error fetching customers:\", customersError);\n                throw new Error(customersError.message);\n            }\n            if (!customers || customers.length === 0) {\n                return [];\n            }\n            // Get customer profiles\n            const { data: profiles, error: profilesError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_profiles\").select(\"*\").in(\"customer_id\", customers.map((c)=>c.id));\n            if (profilesError) {\n                console.error(\"Error fetching customer profiles:\", profilesError);\n                throw new Error(profilesError.message);\n            }\n            // Get KYC verifications\n            const { data: kycVerifications, error: kycError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"kyc_verifications\").select(\"*\").in(\"customer_id\", customers.map((c)=>c.id));\n            if (kycError) {\n                console.error(\"Error fetching KYC verifications:\", kycError);\n                throw new Error(kycError.message);\n            }\n            // Get customer jars\n            const { data: customerJars, error: jarsError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_jars\").select(\"*\").in(\"customer_id\", customers.map((c)=>c.id));\n            if (jarsError) {\n                console.error(\"Error fetching customer jars:\", jarsError);\n                throw new Error(jarsError.message);\n            }\n            // Map the data to CustomerProfile interface\n            return customers.map((customer)=>{\n                var _profile_annual_income;\n                const profile = profiles === null || profiles === void 0 ? void 0 : profiles.find((p)=>p.customer_id === customer.id);\n                const kyc = kycVerifications === null || kycVerifications === void 0 ? void 0 : kycVerifications.find((k)=>k.customer_id === customer.id);\n                const jars = (customerJars === null || customerJars === void 0 ? void 0 : customerJars.filter((j)=>j.customer_id === customer.id)) || [];\n                return {\n                    id: customer.id,\n                    firstName: customer.first_name,\n                    lastName: customer.last_name,\n                    email: customer.email,\n                    phone: customer.phone,\n                    status: customer.is_active ? \"active\" : \"inactive\",\n                    kycStatus: (kyc === null || kyc === void 0 ? void 0 : kyc.status) || \"pending\",\n                    addressLine1: (profile === null || profile === void 0 ? void 0 : profile.address_line1) || \"\",\n                    addressLine2: profile === null || profile === void 0 ? void 0 : profile.address_line2,\n                    city: (profile === null || profile === void 0 ? void 0 : profile.city) || \"\",\n                    state: (profile === null || profile === void 0 ? void 0 : profile.state) || \"\",\n                    zipCode: (profile === null || profile === void 0 ? void 0 : profile.zip_code) || \"\",\n                    country: (profile === null || profile === void 0 ? void 0 : profile.country) || \"\",\n                    dateOfBirth: (profile === null || profile === void 0 ? void 0 : profile.date_of_birth) || \"\",\n                    taxId: profile === null || profile === void 0 ? void 0 : profile.tax_id,\n                    occupation: profile === null || profile === void 0 ? void 0 : profile.occupation,\n                    employerName: profile === null || profile === void 0 ? void 0 : profile.employer_name,\n                    annualIncome: profile === null || profile === void 0 ? void 0 : (_profile_annual_income = profile.annual_income) === null || _profile_annual_income === void 0 ? void 0 : _profile_annual_income.toString(),\n                    sourceOfFunds: profile === null || profile === void 0 ? void 0 : profile.source_of_funds,\n                    notes: profile === null || profile === void 0 ? void 0 : profile.notes,\n                    receiveMarketingEmails: (profile === null || profile === void 0 ? void 0 : profile.receive_marketing_emails) || false,\n                    totalInvested: jars.reduce((sum, jar)=>sum + (jar.current_value || 0), 0),\n                    jars: jars.length,\n                    createdAt: customer.created_at,\n                    updatedAt: customer.updated_at\n                };\n            });\n        } catch (error) {\n            console.error(\"Error in getCustomers:\", error);\n            throw error instanceof Error ? error : new Error(\"Failed to fetch customers\");\n        }\n    }\n    async getCustomerById(id) {\n        var _customer_kyc_verifications_, _customer_kyc_verifications, _customer_customer_profiles, _customer_customer_profiles1, _customer_customer_profiles2, _customer_customer_profiles3, _customer_customer_profiles4, _customer_customer_profiles5, _customer_customer_profiles6, _customer_customer_profiles7, _customer_customer_profiles8, _customer_customer_profiles9, _customer_customer_profiles_annual_income, _customer_customer_profiles10, _customer_customer_profiles11, _customer_customer_profiles12, _customer_customer_profiles13, _customer_customer_jars, _customer_customer_jars1;\n        const { data: customer, error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customers\").select(\"\\n        *,\\n        customer_profiles (*),\\n        kyc_verifications (status),\\n        customer_jars (\\n          id,\\n          initial_amount,\\n          current_value\\n        )\\n      \").eq(\"id\", id).single();\n        if (error) return null;\n        return {\n            id: customer.id,\n            firstName: customer.first_name,\n            lastName: customer.last_name,\n            email: customer.email,\n            phone: customer.phone,\n            status: customer.is_active ? \"active\" : \"inactive\",\n            kycStatus: ((_customer_kyc_verifications = customer.kyc_verifications) === null || _customer_kyc_verifications === void 0 ? void 0 : (_customer_kyc_verifications_ = _customer_kyc_verifications[0]) === null || _customer_kyc_verifications_ === void 0 ? void 0 : _customer_kyc_verifications_.status) || \"pending\",\n            addressLine1: (_customer_customer_profiles = customer.customer_profiles) === null || _customer_customer_profiles === void 0 ? void 0 : _customer_customer_profiles.address_line1,\n            addressLine2: (_customer_customer_profiles1 = customer.customer_profiles) === null || _customer_customer_profiles1 === void 0 ? void 0 : _customer_customer_profiles1.address_line2,\n            city: (_customer_customer_profiles2 = customer.customer_profiles) === null || _customer_customer_profiles2 === void 0 ? void 0 : _customer_customer_profiles2.city,\n            state: (_customer_customer_profiles3 = customer.customer_profiles) === null || _customer_customer_profiles3 === void 0 ? void 0 : _customer_customer_profiles3.state,\n            zipCode: (_customer_customer_profiles4 = customer.customer_profiles) === null || _customer_customer_profiles4 === void 0 ? void 0 : _customer_customer_profiles4.zip_code,\n            country: (_customer_customer_profiles5 = customer.customer_profiles) === null || _customer_customer_profiles5 === void 0 ? void 0 : _customer_customer_profiles5.country,\n            dateOfBirth: (_customer_customer_profiles6 = customer.customer_profiles) === null || _customer_customer_profiles6 === void 0 ? void 0 : _customer_customer_profiles6.date_of_birth,\n            taxId: (_customer_customer_profiles7 = customer.customer_profiles) === null || _customer_customer_profiles7 === void 0 ? void 0 : _customer_customer_profiles7.tax_id,\n            occupation: (_customer_customer_profiles8 = customer.customer_profiles) === null || _customer_customer_profiles8 === void 0 ? void 0 : _customer_customer_profiles8.occupation,\n            employerName: (_customer_customer_profiles9 = customer.customer_profiles) === null || _customer_customer_profiles9 === void 0 ? void 0 : _customer_customer_profiles9.employer_name,\n            annualIncome: (_customer_customer_profiles10 = customer.customer_profiles) === null || _customer_customer_profiles10 === void 0 ? void 0 : (_customer_customer_profiles_annual_income = _customer_customer_profiles10.annual_income) === null || _customer_customer_profiles_annual_income === void 0 ? void 0 : _customer_customer_profiles_annual_income.toString(),\n            sourceOfFunds: (_customer_customer_profiles11 = customer.customer_profiles) === null || _customer_customer_profiles11 === void 0 ? void 0 : _customer_customer_profiles11.source_of_funds,\n            notes: (_customer_customer_profiles12 = customer.customer_profiles) === null || _customer_customer_profiles12 === void 0 ? void 0 : _customer_customer_profiles12.notes,\n            receiveMarketingEmails: ((_customer_customer_profiles13 = customer.customer_profiles) === null || _customer_customer_profiles13 === void 0 ? void 0 : _customer_customer_profiles13.receive_marketing_emails) || false,\n            totalInvested: ((_customer_customer_jars = customer.customer_jars) === null || _customer_customer_jars === void 0 ? void 0 : _customer_customer_jars.reduce((sum, jar)=>sum + jar.current_value, 0)) || 0,\n            jars: ((_customer_customer_jars1 = customer.customer_jars) === null || _customer_customer_jars1 === void 0 ? void 0 : _customer_customer_jars1.length) || 0,\n            createdAt: customer.created_at,\n            updatedAt: customer.updated_at\n        };\n    }\n    async createCustomer(data) {\n        // First create the customer\n        const { data: customer, error: customerError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customers\").insert({\n            first_name: data.firstName,\n            last_name: data.lastName,\n            email: data.email,\n            phone: data.phone,\n            is_active: data.status === \"active\"\n        }).select().single();\n        if (customerError) throw customerError;\n        // Then create the customer profile\n        const { error: profileError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_profiles\").insert({\n            customer_id: customer.id,\n            address_line1: data.addressLine1,\n            address_line2: data.addressLine2,\n            city: data.city,\n            state: data.state,\n            zip_code: data.zipCode,\n            country: data.country,\n            date_of_birth: data.dateOfBirth,\n            tax_id: data.taxId,\n            occupation: data.occupation,\n            employer_name: data.employerName,\n            annual_income: data.annualIncome ? parseFloat(data.annualIncome.toString()) : null,\n            source_of_funds: data.sourceOfFunds,\n            notes: data.notes,\n            receive_marketing_emails: data.receiveMarketingEmails\n        });\n        if (profileError) throw profileError;\n        // Create initial KYC verification record\n        const { error: kycError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"kyc_verifications\").insert({\n            customer_id: customer.id,\n            document_type: \"pending\",\n            status: \"pending\"\n        });\n        if (kycError) throw kycError;\n        return this.getCustomerById(customer.id);\n    }\n    async updateCustomer(id, data) {\n        console.log(\"CustomerService.updateCustomer called with:\", {\n            id,\n            data\n        });\n        try {\n            // Update customer\n            const { error: customerError } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customers\").update({\n                first_name: data.firstName,\n                last_name: data.lastName,\n                email: data.email,\n                phone: data.phone,\n                is_active: data.status === \"active\",\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", id);\n            if (customerError) {\n                console.error(\"Error updating customer:\", customerError);\n                throw customerError;\n            }\n            // Check if customer profile exists\n            const { data: existingProfile } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_profiles\").select(\"*\").eq(\"customer_id\", id).single();\n            // Update or insert customer profile\n            const profileData = {\n                customer_id: id,\n                address_line1: data.addressLine1,\n                address_line2: data.addressLine2,\n                city: data.city,\n                state: data.state,\n                zip_code: data.zipCode,\n                country: data.country,\n                date_of_birth: data.dateOfBirth,\n                tax_id: data.taxId,\n                occupation: data.occupation,\n                employer_name: data.employerName,\n                annual_income: data.annualIncome ? parseFloat(data.annualIncome.toString()) : null,\n                source_of_funds: data.sourceOfFunds,\n                notes: data.notes,\n                receive_marketing_emails: data.receiveMarketingEmails,\n                updated_at: new Date().toISOString()\n            };\n            const { error: profileError } = existingProfile ? await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_profiles\").update(profileData).eq(\"customer_id\", id) : await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customer_profiles\").insert({\n                ...profileData,\n                created_at: new Date().toISOString()\n            });\n            if (profileError) {\n                console.error(\"Error updating customer profile:\", profileError);\n                throw profileError;\n            }\n            // Update KYC status if provided\n            if (data.kycStatus) {\n                // Check if KYC verification exists\n                const { data: existingKyc } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"kyc_verifications\").select(\"*\").eq(\"customer_id\", id).single();\n                const kycData = {\n                    customer_id: id,\n                    status: data.kycStatus,\n                    verified_at: data.kycStatus === \"verified\" ? new Date().toISOString() : null,\n                    updated_at: new Date().toISOString()\n                };\n                const { error: kycError } = existingKyc ? await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"kyc_verifications\").update(kycData).eq(\"customer_id\", id) : await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"kyc_verifications\").insert({\n                    ...kycData,\n                    created_at: new Date().toISOString()\n                });\n                if (kycError) {\n                    console.error(\"Error updating KYC verification:\", kycError);\n                    throw kycError;\n                }\n            }\n            const updatedCustomer = await this.getCustomerById(id);\n            if (!updatedCustomer) {\n                throw new Error(\"Failed to fetch updated customer\");\n            }\n            console.log(\"Customer updated successfully:\", updatedCustomer);\n            return updatedCustomer;\n        } catch (error) {\n            console.error(\"Error in updateCustomer:\", error);\n            throw error;\n        }\n    }\n    async deleteCustomer(id) {\n        const { error } = await _lib_supabase_client__WEBPACK_IMPORTED_MODULE_0__.supabaseAdmin.from(\"customers\").delete().eq(\"id\", id);\n        if (error) throw error;\n    }\n    async exportCustomers(format) {\n        const customers = await this.getCustomers();\n        if (format === \"csv\") {\n            const headers = Object.keys(customers[0]).join(\",\");\n            const rows = customers.map((customer)=>Object.values(customer).join(\",\")).join(\"\\n\");\n            const csv = \"\".concat(headers, \"\\n\").concat(rows);\n            return new Blob([\n                csv\n            ], {\n                type: \"text/csv\"\n            });\n        }\n        if (format === \"excel\") {\n            // Use xlsx library to create Excel file\n            const XLSX = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_xlsx_0_18_5_node_modules_xlsx_xlsx_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! xlsx */ \"(app-pages-browser)/./node_modules/.pnpm/xlsx@0.18.5/node_modules/xlsx/xlsx.mjs\"));\n            const worksheet = XLSX.utils.json_to_sheet(customers);\n            const workbook = XLSX.utils.book_new();\n            XLSX.utils.book_append_sheet(workbook, worksheet, \"Customers\");\n            const excelBuffer = XLSX.write(workbook, {\n                bookType: \"xlsx\",\n                type: \"array\"\n            });\n            return new Blob([\n                excelBuffer\n            ], {\n                type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            });\n        }\n        if (format === \"pdf\") {\n            // Use pdfmake to create PDF file\n            const pdfMake = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_pdfmake_0_2_19_node_modules_pdfmake_build_pdfmake_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdfmake/build/pdfmake */ \"(app-pages-browser)/./node_modules/.pnpm/pdfmake@0.2.19/node_modules/pdfmake/build/pdfmake.js\", 23));\n            const pdfFonts = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pnpm_pdfmake_0_2_19_node_modules_pdfmake_build_vfs_fonts_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdfmake/build/vfs_fonts */ \"(app-pages-browser)/./node_modules/.pnpm/pdfmake@0.2.19/node_modules/pdfmake/build/vfs_fonts.js\", 23));\n            pdfMake.default.vfs = pdfFonts.default.pdfMake.vfs;\n            const docDefinition = {\n                content: [\n                    {\n                        text: \"Customer List\",\n                        style: \"header\"\n                    },\n                    {\n                        table: {\n                            headerRows: 1,\n                            body: [\n                                Object.keys(customers[0]),\n                                ...customers.map((customer)=>Object.values(customer))\n                            ]\n                        }\n                    }\n                ],\n                styles: {\n                    header: {\n                        fontSize: 18,\n                        bold: true,\n                        margin: [\n                            0,\n                            0,\n                            0,\n                            10\n                        ]\n                    }\n                }\n            };\n            return new Promise((resolve)=>{\n                const pdfDocGenerator = pdfMake.default.createPdf(docDefinition);\n                pdfDocGenerator.getBlob((blob)=>{\n                    resolve(blob);\n                });\n            });\n        }\n        throw new Error(\"Unsupported export format\");\n    }\n}\nconst customerService = new CustomerService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/services/customer.service.ts\n"));

/***/ })

});
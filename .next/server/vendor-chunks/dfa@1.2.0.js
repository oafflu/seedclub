"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dfa@1.2.0";
exports.ids = ["vendor-chunks/dfa@1.2.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/dfa@1.2.0/node_modules/dfa/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/.pnpm/dfa@1.2.0/node_modules/dfa/index.js ***!
  \****************************************************************/
/***/ ((module) => {

eval("\n\nvar INITIAL_STATE = 1;\nvar FAIL_STATE = 0;\n/**\n * A StateMachine represents a deterministic finite automaton.\n * It can perform matches over a sequence of values, similar to a regular expression.\n */\n\nclass StateMachine {\n  constructor(dfa) {\n    this.stateTable = dfa.stateTable;\n    this.accepting = dfa.accepting;\n    this.tags = dfa.tags;\n  }\n  /**\n   * Returns an iterable object that yields pattern matches over the input sequence.\n   * Matches are of the form [startIndex, endIndex, tags].\n   */\n\n\n  match(str) {\n    var self = this;\n    return {\n      *[Symbol.iterator]() {\n        var state = INITIAL_STATE;\n        var startRun = null;\n        var lastAccepting = null;\n        var lastState = null;\n\n        for (var p = 0; p < str.length; p++) {\n          var c = str[p];\n          lastState = state;\n          state = self.stateTable[state][c];\n\n          if (state === FAIL_STATE) {\n            // yield the last match if any\n            if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n              yield [startRun, lastAccepting, self.tags[lastState]];\n            } // reset the state as if we started over from the initial state\n\n\n            state = self.stateTable[INITIAL_STATE][c];\n            startRun = null;\n          } // start a run if not in the failure state\n\n\n          if (state !== FAIL_STATE && startRun == null) {\n            startRun = p;\n          } // if accepting, mark the potential match end\n\n\n          if (self.accepting[state]) {\n            lastAccepting = p;\n          } // reset the state to the initial state if we get into the failure state\n\n\n          if (state === FAIL_STATE) {\n            state = INITIAL_STATE;\n          }\n        } // yield the last match if any\n\n\n        if (startRun != null && lastAccepting != null && lastAccepting >= startRun) {\n          yield [startRun, lastAccepting, self.tags[state]];\n        }\n      }\n\n    };\n  }\n  /**\n   * For each match over the input sequence, action functions matching\n   * the tag definitions in the input pattern are called with the startIndex,\n   * endIndex, and sub-match sequence.\n   */\n\n\n  apply(str, actions) {\n    for (var [start, end, tags] of this.match(str)) {\n      for (var tag of tags) {\n        if (typeof actions[tag] === 'function') {\n          actions[tag](start, end, str.slice(start, end + 1));\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = StateMachine;\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vZGZhQDEuMi4wL25vZGVfbW9kdWxlcy9kZmEvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixnQkFBZ0I7QUFDeEM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7O0FBR2Q7QUFDQTtBQUNBLFlBQVk7OztBQUdaO0FBQ0E7QUFDQSxZQUFZOzs7QUFHWjtBQUNBO0FBQ0EsWUFBWTs7O0FBR1o7QUFDQTtBQUNBO0FBQ0EsVUFBVTs7O0FBR1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvb2JlZGthZmZsdS9Eb2N1bWVudHMvR2l0SHViL3NlZWRjbHViL25vZGVfbW9kdWxlcy8ucG5wbS9kZmFAMS4yLjAvbm9kZV9tb2R1bGVzL2RmYS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBJTklUSUFMX1NUQVRFID0gMTtcbnZhciBGQUlMX1NUQVRFID0gMDtcbi8qKlxuICogQSBTdGF0ZU1hY2hpbmUgcmVwcmVzZW50cyBhIGRldGVybWluaXN0aWMgZmluaXRlIGF1dG9tYXRvbi5cbiAqIEl0IGNhbiBwZXJmb3JtIG1hdGNoZXMgb3ZlciBhIHNlcXVlbmNlIG9mIHZhbHVlcywgc2ltaWxhciB0byBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqL1xuXG5jbGFzcyBTdGF0ZU1hY2hpbmUge1xuICBjb25zdHJ1Y3RvcihkZmEpIHtcbiAgICB0aGlzLnN0YXRlVGFibGUgPSBkZmEuc3RhdGVUYWJsZTtcbiAgICB0aGlzLmFjY2VwdGluZyA9IGRmYS5hY2NlcHRpbmc7XG4gICAgdGhpcy50YWdzID0gZGZhLnRhZ3M7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gaXRlcmFibGUgb2JqZWN0IHRoYXQgeWllbGRzIHBhdHRlcm4gbWF0Y2hlcyBvdmVyIHRoZSBpbnB1dCBzZXF1ZW5jZS5cbiAgICogTWF0Y2hlcyBhcmUgb2YgdGhlIGZvcm0gW3N0YXJ0SW5kZXgsIGVuZEluZGV4LCB0YWdzXS5cbiAgICovXG5cblxuICBtYXRjaChzdHIpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gSU5JVElBTF9TVEFURTtcbiAgICAgICAgdmFyIHN0YXJ0UnVuID0gbnVsbDtcbiAgICAgICAgdmFyIGxhc3RBY2NlcHRpbmcgPSBudWxsO1xuICAgICAgICB2YXIgbGFzdFN0YXRlID0gbnVsbDtcblxuICAgICAgICBmb3IgKHZhciBwID0gMDsgcCA8IHN0ci5sZW5ndGg7IHArKykge1xuICAgICAgICAgIHZhciBjID0gc3RyW3BdO1xuICAgICAgICAgIGxhc3RTdGF0ZSA9IHN0YXRlO1xuICAgICAgICAgIHN0YXRlID0gc2VsZi5zdGF0ZVRhYmxlW3N0YXRlXVtjXTtcblxuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gRkFJTF9TVEFURSkge1xuICAgICAgICAgICAgLy8geWllbGQgdGhlIGxhc3QgbWF0Y2ggaWYgYW55XG4gICAgICAgICAgICBpZiAoc3RhcnRSdW4gIT0gbnVsbCAmJiBsYXN0QWNjZXB0aW5nICE9IG51bGwgJiYgbGFzdEFjY2VwdGluZyA+PSBzdGFydFJ1bikge1xuICAgICAgICAgICAgICB5aWVsZCBbc3RhcnRSdW4sIGxhc3RBY2NlcHRpbmcsIHNlbGYudGFnc1tsYXN0U3RhdGVdXTtcbiAgICAgICAgICAgIH0gLy8gcmVzZXQgdGhlIHN0YXRlIGFzIGlmIHdlIHN0YXJ0ZWQgb3ZlciBmcm9tIHRoZSBpbml0aWFsIHN0YXRlXG5cblxuICAgICAgICAgICAgc3RhdGUgPSBzZWxmLnN0YXRlVGFibGVbSU5JVElBTF9TVEFURV1bY107XG4gICAgICAgICAgICBzdGFydFJ1biA9IG51bGw7XG4gICAgICAgICAgfSAvLyBzdGFydCBhIHJ1biBpZiBub3QgaW4gdGhlIGZhaWx1cmUgc3RhdGVcblxuXG4gICAgICAgICAgaWYgKHN0YXRlICE9PSBGQUlMX1NUQVRFICYmIHN0YXJ0UnVuID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0YXJ0UnVuID0gcDtcbiAgICAgICAgICB9IC8vIGlmIGFjY2VwdGluZywgbWFyayB0aGUgcG90ZW50aWFsIG1hdGNoIGVuZFxuXG5cbiAgICAgICAgICBpZiAoc2VsZi5hY2NlcHRpbmdbc3RhdGVdKSB7XG4gICAgICAgICAgICBsYXN0QWNjZXB0aW5nID0gcDtcbiAgICAgICAgICB9IC8vIHJlc2V0IHRoZSBzdGF0ZSB0byB0aGUgaW5pdGlhbCBzdGF0ZSBpZiB3ZSBnZXQgaW50byB0aGUgZmFpbHVyZSBzdGF0ZVxuXG5cbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEZBSUxfU1RBVEUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gSU5JVElBTF9TVEFURTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8geWllbGQgdGhlIGxhc3QgbWF0Y2ggaWYgYW55XG5cblxuICAgICAgICBpZiAoc3RhcnRSdW4gIT0gbnVsbCAmJiBsYXN0QWNjZXB0aW5nICE9IG51bGwgJiYgbGFzdEFjY2VwdGluZyA+PSBzdGFydFJ1bikge1xuICAgICAgICAgIHlpZWxkIFtzdGFydFJ1biwgbGFzdEFjY2VwdGluZywgc2VsZi50YWdzW3N0YXRlXV07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEZvciBlYWNoIG1hdGNoIG92ZXIgdGhlIGlucHV0IHNlcXVlbmNlLCBhY3Rpb24gZnVuY3Rpb25zIG1hdGNoaW5nXG4gICAqIHRoZSB0YWcgZGVmaW5pdGlvbnMgaW4gdGhlIGlucHV0IHBhdHRlcm4gYXJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydEluZGV4LFxuICAgKiBlbmRJbmRleCwgYW5kIHN1Yi1tYXRjaCBzZXF1ZW5jZS5cbiAgICovXG5cblxuICBhcHBseShzdHIsIGFjdGlvbnMpIHtcbiAgICBmb3IgKHZhciBbc3RhcnQsIGVuZCwgdGFnc10gb2YgdGhpcy5tYXRjaChzdHIpKSB7XG4gICAgICBmb3IgKHZhciB0YWcgb2YgdGFncykge1xuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbnNbdGFnXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGFjdGlvbnNbdGFnXShzdGFydCwgZW5kLCBzdHIuc2xpY2Uoc3RhcnQsIGVuZCArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdGVNYWNoaW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/dfa@1.2.0/node_modules/dfa/index.js\n");

/***/ })

};
;